//
//  ViewController.swift
//  JobsSwiftBaseConfigDemo
//
//  Created by Jobs on 2025/6/4.
//

import UIKit
import SnapKit
//import JobsObj
//Â¶ÇÊûú‰Ω†ÁúüÁöÑÊÉ≥Ë¶Å import JobsObjÔºå‰Ω†Ë¶ÅËøôÊ†∑ÂÅöÔºö
//‰Ω†Â∞±Âæó Êää JobsObj.swift ÂçïÁã¨ÂÅöÊàê moduleÔºåÊñπÊ≥ïÂ¶Ç‰∏ãÔºö
//ÂàõÂª∫‰∏Ä‰∏™Êñ∞ Framework TargetÔºà‰æãÂ¶ÇÂè´ JobsObjÔºâÔºõ
//Êää JobsObj.swift ÊãñËøõÂéªÔºõ
//Âú®‰∏ª App Target ‰∏≠ import JobsObjÔºõ
//Âú®‰∏ª Target ÁöÑ General > Frameworks, Libraries, and Embedded Content ‰∏≠Ê∑ªÂä†ËØ• frameworkÔºõ
//ÁºñËØë„ÄÇ
class ViewController: UIViewController{
    fileprivate let tableView = UITableView()/// ÈªòËÆ§internal„ÄÇfileprivateÊú¨Êñá‰ª∂ÂèØËÆøÈóÆ
    private var data: [(title: String, subtitle: String)] = []
    private var isLoadingMore = false

    private let refreshControl = UIRefreshControl()
    private let emptyView = EmptyView()

    private var dataSource: UITableViewDiffableDataSource<Int, String>!

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        
        let obj = NSObject()
        obj.name = "Jobs"
        obj.greet() // ËæìÂá∫: üëã Hello, my name is Jobs

        setupTableView()
        setupEmptyView()
        setupDataSource()

        loadInitialData()
    }

    private func setupTableView() {
        view.addSubview(tableView)

        tableView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }

        /// Â∞ÅË£ÖÊàêÁÇπËØ≠Ê≥ïÁöÑÂΩ¢Âºè
        tableView
            .registerCell(CustomCell.self)
            .byDelegate(self)
            .byDataSource(self)
        
        tableView.register(CustomCell.self, forCellReuseIdentifier: "CustomCell")
        tableView.delegate = self

        refreshControl.addTarget(self, action: #selector(refreshData), for: .valueChanged)
        tableView.refreshControl = refreshControl
    }

    private func setupEmptyView() {
        view.addSubview(emptyView)
        emptyView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
        emptyView.isHidden = true
        emptyView.onTapRetry = { [weak self] in
            self?.loadInitialData()
        }
    }

    private func setupDataSource() {
        dataSource = UITableViewDiffableDataSource<Int, String>(tableView: tableView) {
            (tableView, indexPath, item) -> UITableViewCell? in
            guard let cell = tableView.dequeueReusableCell(withIdentifier: "CustomCell", for: indexPath) as? CustomCell else {
                return UITableViewCell()
            }
            let value = self.data[indexPath.row]
            cell.config(title: value.title, subtitle: value.subtitle)
            return cell
        }
    }

    private func applySnapshot(animated: Bool = true) {
        var snapshot = NSDiffableDataSourceSnapshot<Int, String>()
        snapshot.appendSections([0])
        snapshot.appendItems(data.map { $0.title })
        dataSource.apply(snapshot, animatingDifferences: animated)
    }

    private func loadInitialData() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.data = (1...10).map { ("Ê†áÈ¢ò \($0)", "ÂâØÊ†áÈ¢òÂÜÖÂÆπ \($0)") }
            self.applySnapshot()
            self.refreshControl.endRefreshing()
            self.checkEmptyState()
        }
    }

    @objc private func refreshData() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.data = (1...Int.random(in: 0...8)).map { ("Âà∑Êñ∞ \($0)", "ÂâØÊ†áÈ¢ò \($0)") }
            self.applySnapshot()
            self.refreshControl.endRefreshing()
            self.checkEmptyState()
        }
    }

    private func loadMoreData() {
        guard !isLoadingMore else { return }
        isLoadingMore = true

        DispatchQueue.main.asyncAfter(deadline: .now() + 1.5) {
            let more = (self.data.count + 1...self.data.count + 5).map {
                ("Âä†ËΩΩÊõ¥Â§ö \($0)", "ÂâØÊ†áÈ¢ò \($0)")
            }
            self.data.append(contentsOf: more)
            self.applySnapshot()
            self.isLoadingMore = false
        }
    }

    private func checkEmptyState() {
        emptyView.isHidden = !data.isEmpty
        tableView.isHidden = data.isEmpty
    }
}
// MARK: - UIScrollViewDelegate ‰∏äÊãâÂä†ËΩΩÊõ¥Â§ö
// Swift ‰∏çÂÖÅËÆ∏Âú® extension ÁöÑ‰ΩúÁî®ÂüüÈáåÂÜô‚ÄúÊâßË°åËØ≠Âè•‚Äù„ÄÇ
// Âè™ËÉΩÂÜôÊñπÊ≥ï„ÄÅËÆ°ÁÆóÂ±ûÊÄß„ÄÅÂµåÂ•óÁ±ªÂûãÔºå‰∏çËÉΩÂÜôÁõ¥Êé•ÊâßË°åÁöÑ‰ª£Á†ÅÔºàË°®ËææÂºè/ËØ≠Âè•Ôºâ
extension ViewController: UITableViewDelegate {
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let height = scrollView.frame.size.height

        if offsetY > contentHeight - height - 100 {
            loadMoreData()
        }
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let vc = VC2()
        navigationController?.pushViewController(vc, animated: true)
    }
}
// MARK: - UITableViewDataSource
extension ViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        20
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "UITableViewCell", for: indexPath)
        cell.textLabel?.text = "Á¨¨ \(indexPath.row + 1) Ë°å"
        return cell
    }
}
